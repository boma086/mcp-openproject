# UV Project Configuration for Modern Python Package Management
# Supports both uvx and uv install methods

[project]
name = "mcp-openproject"
version = "0.1.0"
description = "OpenProject MCP Server for AI Integration"
requires-python = ">=3.9"

[tool.uv]
# Enable script mode for uvx compatibility
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
]

# Optional dependencies for different use cases
[tool.uv.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]

full = [
    "uvicorn[standard]>=0.24.0",
    "structlog>=23.0.0",
    "python-dotenv>=1.0.1",
    "cryptography>=41.0.0",
]

ai-backend = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "langchain>=0.1.0",
    "langchain-openai>=0.0.2",
    "redis>=5.0.0",
    "sqlalchemy>=2.0.0",
    "jinja2>=3.1.0",
    "python-multipart>=0.0.6",
]

# All dependencies for complete installation
all = [
    "mcp-openproject[dev,full,ai-backend]"
]

# UV scripts for development and testing
[tool.uv.scripts]
# Development scripts
dev = "python -m mcp_server.cli server --debug"
test = "pytest tests/"
lint = "ruff check mcp_server/"
format = "black mcp_server/"

# Production scripts
start = "python -m mcp_server.cli server"
config = "python -m mcp_server.cli config"
status = "python -m mcp_server.cli status"

# Example usage scripts
example-stdio = "python -m mcp_server.cli server --stdio"
example-http = "python -m mcp_server.cli server --port 8000"